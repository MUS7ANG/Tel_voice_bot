from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup
from gtts import gTTS
from dotenv import load_dotenv
import os
load_dotenv()

bot = Bot(os.getenv('TOKEN'), parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot=bot)

main = ReplyKeyboardMarkup(resize_keyboard=True)
main.add("English üá∫üá∏").add("–†—É—Å—Å–∫–∏–π üá∑üá∫").add("Fran√ßais üá´üá∑").add("Espa√±ol üá™üá∏")

current_language = "en"

@dp.message_handler(commands=["start"])
async def say_hi(msg: types.Message):
    await msg.answer("Ok, choose your lang", reply_markup=main)

@dp.message_handler(commands=["language"])
async def change_language(msg: types.Message):
    global current_language
    if msg.text == "/language English":
        current_language = "en"
        await msg.reply("–Ø–∑—ã–∫ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π")
    elif msg.text == "/language –†—É—Å—Å–∫–∏–π":
        current_language = "ru"
        await msg.reply("–Ø–∑—ã–∫ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ —Ä—É—Å—Å–∫–∏–π")
    elif msg.text == "/language Fran√ßais":
        current_language = "fr"
        await msg.reply("–Ø–∑—ã–∫ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π")
    elif msg.text == "/language Espa√±ol":
        current_language = "es"
        await msg.reply("–Ø–∑—ã–∫ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ –∏—Å–ø–∞–Ω—Å–∫–∏–π")
    else:
        await msg.reply("–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —è–∑—ã–∫–∞")


@dp.message_handler(text="English üá∫üá∏")
async def eng(msg: types.Message):
    global current_language
    current_language = "en"
    await msg.reply(f'–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —è–∑—ã–∫: {current_language}')
    text = msg.text
    filename = f'{msg.chat.id}_{msg.message_id}.mp3'

    audio = gTTS(text=text, lang=current_language, slow=False)
    audio.save(filename)

    with open(filename, 'rb') as f:
        await bot.send_audio(chat_id=msg.chat.id, audio=f)

    os.remove(filename)
    current_language = "en"
@dp.message_handler(text="–†—É—Å—Å–∫–∏–π üá∑üá∫")
async def rus(msg: types.Message):
    global current_language
    current_language = "ru"
    await msg.reply(f'–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —è–∑—ã–∫: {current_language}')
    text = msg.text
    filename = f'{msg.chat.id}_{msg.message_id}.mp3'

    audio = gTTS(text=text, lang=current_language, slow=False)
    audio.save(filename)

    with open(filename, 'rb') as f:
        await bot.send_audio(chat_id=msg.chat.id, audio=f)

    os.remove(filename)
    current_language = "ru"
@dp.message_handler(text="Fran√ßais üá´üá∑")
async def fran(msg: types.Message):
    global current_language
    current_language = "fr"
    await msg.reply(f'–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —è–∑—ã–∫: {current_language}')
    text = msg.text
    filename = f'{msg.chat.id}_{msg.message_id}.mp3'

    audio = gTTS(text=text, lang=current_language, slow=False)
    audio.save(filename)

    with open(filename, 'rb') as f:
        await bot.send_audio(chat_id=msg.chat.id, audio=f)

    os.remove(filename)
    current_language = "fr"
@dp.message_handler(text="Espa√±ol üá™üá∏")
async def esp(msg: types.Message):
    global current_language
    current_language = "es"
    await msg.reply(f'–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —è–∑—ã–∫: {current_language}')
    text = msg.text
    filename = f'{msg.chat.id}_{msg.message_id}.mp3'

    audio = gTTS(text=text, lang=current_language, slow=False)
    audio.save(filename)

    with open(filename, 'rb') as f:
        await bot.send_audio(chat_id=msg.chat.id, audio=f)

    os.remove(filename)
    current_language = "es"


@dp.message_handler(content_types=types.ContentType.TEXT)
async def theend(msg: types.Message):
    await msg.reply("converted successfully!")
    await msg.reply(f'–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —è–∑—ã–∫: {current_language}')
    text = msg.text
    filename = f'{msg.chat.id}_{msg.message_id}.mp3'

    audio = gTTS(text=text, lang=current_language, slow=False)
    audio.save(filename)

    with open(filename, 'rb') as f:
        await bot.send_audio(chat_id=msg.chat.id, audio=f)

    os.remove(filename)


if __name__ == '__main__':
    executor.start_polling(dp)